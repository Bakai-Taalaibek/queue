  clients: [],
   appointments: [],
   queue: [],
   error: [],
   breakTime: {},
   serviceTime: {},
   shiftTime: {},
   loading: false,

   // Getting initial data:
   getDataStore: async (email) => {
      set({ loading: true });
      try {
         const res = await axios(`${API}/operator/${email}`);
         set({ clients: res.data });
      } catch (err) {
         set({ error: err });
      } finally {
         set({ loading: false });
      }
   },

   // Send a client to the end of queue:
   sendToEndOfQueueStore: async (id) => {
      set({ loading: true });
      try {
         const res = await axios.post(`${API}/clients/end/${id}`);
         set({ clients: res.data });
      } catch (err) {
         set({ error: err });
      } finally {
         set({ loading: false });
      }
   },

   // Remove from queue:
   removeFromQueueStore: async (id) => {
      set({ loading: true });
      try {
         const res = await axios.post(`${API}/clients/remove/${id}`);
         set({ clients: res.data });
      } catch (err) {
         set({ error: err });
      } finally {
         set({ loading: false });
      }
   },

   // Transfer to another queue:
   transferToQueueStore: async (id, queue_id) => {
      set({ loading: true });
      try {
         const res = await axios.post(
            `${API}/clients/transfer/${queue_id}`,
            id
         );
         set({ clients: res.data });
      } catch (err) {
         set({ error: err });
      } finally {
         set({ loading: false });
      }
   },

   // Move to start of queue:
   moveToStartOfQueueStore: async (id) => {
      set({ loading: true });
      try {
         const res = await axios.post(`${API}/clients/start/`, id);
         set({ clients: res.data });
      } catch (err) {
         set({ error: err });
      } finally {
         set({ loading: false });
      }
   },

   // Delay queue:
   setDelayOfQueueStore: async (minutes, id) => {
      set({ loading: true });
      try {
         const res = await axios.post(`${API}/clients/delay/${id}`, minutes);
         set({ clients: res.data });
      } catch (err) {
         set({ error: err });
      } finally {
         set({ loading: false });
      }
   },

   // Appointments:
   getAppointmentsStore: async () => {
      set({ loading: true });
      try {
         const res = await axios(`${API}/clients/appointments/data`);
         set({ appointments: res.data });
      } catch (err) {
         set({ error: err });
      } finally {
         set({ loading: false });
      }
   },

   // Edit information on appointment:
   editAppointmentInfoStore: async (data) => {
      set({ loading: true });
      try {
         const res = await axios.put(`${API}/clients/appointments/`, data);
         set({ clients: res.data });
      } catch (err) {
         set({ error: err });
      } finally {
         set({ loading: false });
      }
   },

   // Save start time:
   setStartTimeStore: async (time, id) => {
      set({ loading: true });
      try {
         await axios.post(`${API}/clients/time/start${id}`, time);
      } catch (err) {
         set({ error: err });
      } finally {
         set({ loading: false });
      }
   },

   // Set up who can pass talons:
   setTalonAccessStore: async (email, queue) => {
      set({ loading: true });
      try {
         const res = await axios.post(`${API}/employee/queues/${email}`, queue);
         set({ queue: res.data });
      } catch (err) {
         set({ error: err });
      } finally {
         set({ loading: false });
      }
   },

   // Setting up break time:
   setBreakTimeStore: async (time, email) => {
      set({ loading: true });
      try {
         const res = await axios.post(`${API}/employee/break/${email}`, time);
         set({ breakTime: res.data });
      } catch (err) {
         set({ error: err });
      } finally {
         set({ loading: false });
      }
   },

   // Service time alert:
   serviceTimeAlertStore: async (id) => {
      set({ loading: true });
      try {
         const res = await axios(`${API}/clients/time/alert/${id}`);
         set({ serviceTime: res.data });
      } catch (err) {
         set({ error: err });
      } finally {
         set({ loading: false });
      }
   },

   // Setting up shift time:
   setShiftTimeStore: async (email, time) => {
      set({ loading: true });
      try {
         const res = await axios.post(`${API}/employee/shift/${email}`, time);
         set({ shiftTime: res.data });
      } catch (err) {
         set({ error: err });
      } finally {
         set({ loading: false });
      }
   },

   <Sider
         style={{ backgroundColor: 'blue', height: '100%' }}
         collapsible
         collapsed={collapsed}
         onCollapse={(value) => setCollapsed(value)}
      >
         <div>123</div>
         <div>123</div>
      </Sider>

      import React, { useState } from 'react';
import styles from '@/assets/styles/operator/Sidebar.module.scss';

import { Image, Input, Menu, Popover } from 'antd';
import { useTranslation } from 'react-i18next';
import Sider from 'antd/es/layout/Sider';
import { UserOutlined, SettingOutlined, HomeOutlined } from '@ant-design/icons';
import { useNavigate } from 'react-router';

const Sidebar = () => {
   const navigate = useNavigate();
c
   function getItem(label, key, icon, children) {
      return {
         key,
         icon,
         label,
         children,
      };
   }
   const items = [
      {
         key: '1',
         title: 'Custom Item',
         icon: <UserOutlined />,
         customChild: <span>Custom Child</span>,
      },
      {
         key: '2',
         title: 'Menu Item 2',
      },
      {
         key: '3',
         title: 'Menu Item 3',
      },
   ];

   const ITEMS = [
      {
         key: 1,
         label: 'User',
         icon: <UserOutlined style={{ fontSize: '20px', color: 'white' }} />,
         onClick: setCollapsed(!collapsed),

         children: [
            {
               key: 1,
               label: (
                  <div className={styles.childrenBlock}>
                     <label>
                        Bvz
                        <div>asdf</div>
                     </label>
                  </div>
               ),
               type: 'group',
            },
            {
               key: 2,
               label: (
                  <div className={styles.childrenBlock}>
                     <label>
                        Bvz
                        <div>asdf</div>
                     </label>
                  </div>
               ),
               type: 'group',
            },
            {
               key: 3,
               label: (
                  <div className={styles.childrenBlock}>
                     <label>
                        Bvz
                        <div>asdf</div>
                     </label>
                  </div>
               ),
               type: 'group',
            },
            {
               key: 4,
               label: (
                  <div className={styles.childrenBlock}>
                     <label>
                        Bvz
                        <div>asdf</div>
                     </label>
                  </div>
               ),
               type: 'group',
            },
            {
               key: 5,
               label: (
                  <div className={styles.childrenBlock}>
                     <label>
                        Bvz
                        <div>asdf</div>
                     </label>
                  </div>
               ),
               type: 'group',
            },
         ],
      },
      {
         key: 2,
         icon: <SettingOutlined style={{ fontSize: '20px', color: 'white' }} />,
         label: 'settings',
         // children: [],
      },
   ];

   // const SIDE_ICONS = [
   //    getItem(
   //       t('sidebar.popover.profile'),
   //       '1',
   //       <UserOutlined style={{ fontSize: '20px', color: 'white' }} />,
   //       [
   //          getItem('element 1', '1'),
   //          getItem('element 2', '2'),
   //          getItem('element 3', '3'),
   //          getItem('element 4', '4'),
   //       ]
   //    ),
   //    getItem(
   //       t('sidebar.popover.settings'),
   //       '2',
   //       <SettingOutlined style={{ fontSize: '20px', color: 'white' }} />
   //    ),
   // ];

   return (
      <Sider
         width={350}
         collapsible
         collapsed={collapsed}
         onCollapse={setCollapsed}
         trigger={null}
         style={{
            height: '100vh',
            minHeight: '100%',
            overflow: 'auto',
            backgroundColor: '#1e4a89',
         }}
      >
         <Menu
            className='custom-menu'
            mode='inline'
            onClick={() => setCollapsed(!collapsed)}
            items={ITEMS}
            triggerSubMenuAction='hover'
            itemType='SubMenuType'
         />
      </Sider>
   );
};

export default Sidebar;
